% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/forest.r
\name{random_forest}
\alias{random_forest}
\title{title "Random Forest"}
\usage{
random_forest(
  X = NULL,
  y = NULL,
  n_trees = 100,
  max_depth = NULL,
  min_samples_split = 2,
  min_samples_leaf = 1,
  mtry = NULL,
  subsample = ifelse(replace, 1, 0.632),
  replace = TRUE,
  seed = NULL,
  type = c("classification", "regression", "extratrees"),
  n_cores = availableCores() - 1,
  data = NULL,
  formula = NULL
)
}
\arguments{
\item{X}{A data frame of predictor variables.}

\item{y}{A vector of response variables.}

\item{n_trees}{The number of trees to grow.}

\item{max_depth}{The maximum depth of each tree.}

\item{min_samples_split}{The minimum number of samples required to split an internal node.}

\item{min_samples_leaf}{The minimum number of samples required to be at a leaf node.}

\item{mtry}{The number of variables to consider when looking for the best split.}

\item{subsample}{The fraction of samples to use for each tree.}

\item{replace}{Whether to sample with replacement.}

\item{seed}{A seed for the random number generator.}

\item{type}{The type of random forest to grow. Options are "classification", "regression", and "extratrees".}

\item{n_cores}{The number of cores to use.}

\item{data}{A data frame of predictor and response variables.}

\item{formula}{A formula specifying the response and predictor variables.}
}
\value{
A random forest object.
}
\description{
This function implements a random forest algorithm.
}
\examples{
# Load the iris dataset
data(iris)
# Split the data into training and testing sets
set.seed(123)
train_index <- sample(1:nrow(iris), 0.7*nrow(iris))
train_data <- iris[train_index, ]
test_data <- iris[-train_index, ]
# Train a random forest classifier
rf_model <- random_forest(X = train_data[, -5], 
y = train_data[, 5], n_trees = 100, max_depth = 5, 
min_samples_split = 2, min_samples_leaf = 1, mtry = 2, 
subsample = 0.632, replace = TRUE, seed = 123, type = "classification", n_cores = 1)
# Make predictions on the test data
predictions <- predict(rf_model, test_data[, -5])
# Evaluate the accuracy of the model
accuracy <- sum(predictions == test_data[, 5]) / nrow(test_data)
print(accuracy)
}
